datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model Settings {
  id          String    @id @default(cuid())
  siteName    String
  logoImage   String?
  logoText    String?
  socialLinks Json[]    // سيحتوي على مصفوفة من {name, url, icon}
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  name      String?
  role      UserRole  @default(ADMIN)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  UserNotificationState UserNotificationState[]
}

model Page {
  id               Int       @id @default(autoincrement())
  title            String    
  slug             String?   @unique
  description      String?   @db.Text
  metaTitle        String?   
  metaDescription  String?   @db.Text  
  headerTitle      String?   
  headerDescription String?  @db.Text 
  showHeader       Boolean?  @default(false)
  isPublished      Boolean   @default(true)
  publishedAt      DateTime?
  sections         Section[]
  createdBy        String?
  updatedAt        DateTime  @updatedAt
  createdAt        DateTime  @default(now())

  @@index([isPublished])
}

model Section {
  id          Int       @id @default(autoincrement())
  title       String?
  pageId      Int
  page        Page      @relation(fields: [pageId], references: [id], onDelete: Cascade)
  inputs      Input[]
  layoutType  String?   @default("text-only")  
  order       Int?
  isVisible   Boolean   @default(true)
  showBgColor Boolean   @default(false)
  bgColor     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([pageId, order])
}

model Input {
  id          Int       @id @default(autoincrement())
  label       String?
  type        String?   @default("text")
  value       String?   @db.Text
  sectionId   Int
  section     Section   @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([sectionId])
}

model Project {
  id            Int            @id @default(autoincrement())
  title         String    
  slug          String         @unique
  description   String?        @db.Text
  content       String?        @db.Text
  targetAmount  Float?    
  currentAmount Float          @default(0)
  startDate     DateTime       @default(now())
  endDate       DateTime?
  coverImage    String?   
  isPublished   Boolean        @default(false)
  images        ProjectImage[]
  donations     Donation[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([isPublished])
}

model ProjectImage {
  id          Int       @id @default(autoincrement())
  url         String
  publicId    String?
  projectId   Int
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  order       Int?
  createdAt   DateTime  @default(now())
}

model Donor {
  id          Int         @id @default(autoincrement())
  name        String
  email       String?     @unique
  phone       String?     @unique
  anonymous   Boolean     @default(false)
  donations   Donation[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([email])
  @@index([phone])
}

model Donation {
  id          Int           @id @default(autoincrement())
  amount      Float
  projectId   Int
  project     Project       @relation(fields: [projectId], references: [id])
  donorId     Int
  donor       Donor         @relation(fields: [donorId], references: [id])
  status      String        @default("pending")
  message     String?       @db.Text
  isRead      Boolean       @default(false)  
  transaction Transaction?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([projectId, status])
  @@index([donorId])
}

model Contact {
  id        String    @id @default(cuid())
  name      String
  email     String
  phone     String
  subject   String
  message   String    @db.Text
  isRead    Boolean   @default(false)  
  createdAt DateTime  @default(now())

  @@map("contacts")
}

model Transaction {
  id            Int       @id @default(autoincrement())
  donationId    Int       @unique
  donation      Donation  @relation(fields: [donationId], references: [id])
  amount        Float
  currency      String    @default("USD")
  status        String    @default("pending") // pending, processing, completed, failed, refunded
  paymentIntent String?   // Stripe payment intent ID
  paymentData   Json?     // Additional payment data
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([status])
  @@index([paymentIntent])
}

model UserNotificationState {
  id                String    @id @default(cuid())
  userId            String    @unique
  user              User      @relation(fields: [userId], references: [id])
  lastDonationsVisit DateTime @default(now())
  lastMessagesVisit  DateTime @default(now())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([userId])
}