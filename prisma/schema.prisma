datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String                 @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  accounts              Account[]
  role                  UserRole               @default(USER)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}


model Page {
  id          Int       @id @default(autoincrement())
  title       String    
  slug        String?   @unique
  description String?   @db.Text
  metaTitle   String?   // عنوان الميتا
  metaDescription String? @db.Text  // وصف الميتا
  headerTitle String?   // عنوان الهيدر
  headerDescription String? @db.Text // وصف الهيدر
  showHeader  Boolean?  @default(false)
  isPublished Boolean  @default(false)
  publishedAt DateTime?
  sections    Section[]
  createdBy   String?
  updatedAt   DateTime  @updatedAt
  createdAt   DateTime  @default(now())

  @@index([isPublished])
}

model Section {
  id          Int       @id @default(autoincrement())
  title       String?
  pageId      Int
  page        Page      @relation(fields: [pageId], references: [id], onDelete: Cascade)
  inputs      Input[]
  layoutType  String?   @default("text-only")  // إضافة هذا الحقل
  order       Int?
  isVisible   Boolean   @default(true)
  showBgColor Boolean   @default(false)
  bgColor     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([pageId, order])
}

model Input {
  id          Int       @id @default(autoincrement())
  label       String?
  type        String?   @default("text") // "text", "editor", "image", "html"
  value       String?   @db.Text
  sectionId   Int
  section     Section   @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([sectionId])
}

model Project {
  id              Int       @id @default(autoincrement())
  title           String    
  slug            String    @unique
  description     String?   @db.Text
  content         String?   @db.Text
  targetAmount    Float?    
  currentAmount   Float     @default(0)
  startDate       DateTime  @default(now())
  endDate         DateTime?
  coverImage      String?   
  isPublished     Boolean   @default(false)
  images          ProjectImage[]
  donations       Donation[] // إضافة العلاقة العكسية
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([isPublished])
}

model ProjectImage {
  id          Int       @id @default(autoincrement())
  url         String
  publicId    String?
  projectId   Int
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  order       Int?
  createdAt   DateTime  @default(now())
}

model Donation {
  id          Int       @id @default(autoincrement())
  amount      Float
  projectId   Int
  project     Project   @relation(fields: [projectId], references: [id])
  donorName   String    // اسم المتبرع
  email       String?   // البريد الإلكتروني (اختياري)
  phone       String?   // رقم الهاتف (اختياري)
  status      String    @default("pending") // pending, completed, failed
  anonymous   Boolean   @default(false) // هل يريد إخفاء اسمه؟
  message     String?   @db.Text // رسالة من المتبرع (اختياري)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([projectId, status])
}